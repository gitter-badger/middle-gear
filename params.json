{"name":"Middle Gear","tagline":"View Engine for NodeJs Web applications.","body":"v0.1.5\r\n\r\n### Installation\r\n`npm install middle-gear`\r\n\r\n*classic version (Non-Shorthand HTML if you hate indention)*\r\n\r\n`npm install middle-gear-classic`\r\n\r\n* [Let's Start](#lets-start)\r\n* [Adding dynamic value to markup](#adding-dynamic-value-to-markup)\r\n* [Sending external data to markup](#sending-external-data-to-markup)\r\n* [Inheritance](#inheritance)\r\n* [Putting tags in a same line](#putting-tags-in-a-same-line)\r\n* [Breaking line into multiple lines](#breaking-line-into-multiple-lines)\r\n* [Plain text](#plain-text)\r\n* [Adding Script and Style blocks to markup](#adding-script-and-style-blocks-to-markup)\r\n* [Server Side JavaScript inside Script and Style tags](#server-side-javascript-inside-script-and-style-tags)\r\n* [Using custom tags in Melody](#using-custom-tags-in-melody)\r\n* [Shorthands](#shorthands)\r\n* [Commenting](#commenting)\r\n* [What about Controller code?](#what-about-controller-code)\r\n* [Third party framework support](#third-party-framework-support)\r\n  * [Angular](#angular)\r\n  * [SailsJs](#sailsjs)\r\n  * [Lodash](#lodash)\r\n\r\n### Let's Start\r\n*Middle Gear* has provided a language named **Melody**. But you will not be forced to learn a new language. **Melody** is **HTML** plus **JavaScript**. With *Melody* You can **mix** JavaScript with HTML easily. There are a few simple rules to write *Melody*:\r\n\r\n###### There's only one rule for classic version:\r\n\r\n* Place tag's text (ex. ```<span>It's Text</span>```) inside quote marks `'` or `\"` or even backtick `` ` ``.\r\n\r\n```\r\nvar colors = ['Blue', 'Green', 'Red'];\r\n<table>\r\n    _.each(colors, function(color) {\r\n        <tr>\r\n            <td> '@{color}' </td>\r\n        </tr>\r\n    })\r\n<table>\r\n```\r\n\r\n###### Rule for shorthand version:\r\n* Drop `<`, `>` or `/>` from your start tags (ex. ```</div> <br/>```).\r\n* Remove end tags (ex. ```</div>```) entirely.\r\n* Place tag's text (ex. ```<span>It's Text</span>```) inside quote marks `'` or `\"` or even backtick `` ` ``.\r\n* Use `indention` for applying HTML hierarchy. \r\n* When putting HTML tags inside a JavaScript block apply `indention` rule too. \r\n* Don't mix JavaScript and HTML in one line.\r\n\r\n```\r\nvar colors = ['Blue','Green','Red'];\r\ntable\r\n  for (var i = 0; i < colors.length; i++) {    \r\n      tr\r\n        td '@{colors[i]}'\r\n  }\r\n```\r\n**Tip**: As you can see, we have used `indention` to place the `for` expression inside of the `table` tag. We have done the same for  `tr` to tell that it's inside of  `for`. Note that placing a tag inside of code block(`{` ,`}`) will not make it as a subset of that code block, so using `indention` is a must everywhere.\r\n\r\n### Adding dynamic value to markup\r\nAs you can see in above example, we are using `@{}` for adding dynamic values to our markup. Inside the **Dynamic value block**, you can use any expression that returns a value. All of following expressions are acceptable:\r\n\r\n```\r\nspan '1+1=@{1+1}'\r\n'@{parsInt(\"1\")}'\r\n'@{1===1? true : false}'\r\ninput name=\"@{username}\"\r\n//Or in classic version:\r\n<input name=\"@{username}\">\r\n```\r\n\r\n### Sending external data to markup\r\n*Middle Gear* is supporting **MVC** architecture. It means you can send **Model** to a Melody **View**.\r\n```\r\ndiv\r\n  span \"@{model.msg}\"\r\n```\r\n**Note**: As you can see we have used `model` object for accessing the data that has been sent from `controller`.\r\n\r\n### Inheritance\r\n###### Classic version:\r\n*layout:*\r\n```\r\n<html>\r\n  <head>\r\n    <title> 'Middle Gear - Hello World!' </title>\r\n  </head>\r\n  <body>\r\n    load('content')\r\n  </div>\r\n</html>\r\n```\r\n*Inheritor page:*\r\n```\r\nlayout(\"layout.mel\")\r\nsector(\"content\", function() {\r\n  <span> \"Hello world!\" </span>\r\n})\r\n```\r\n###### Shorthand version:\r\n*layout:*\r\n```\r\nhtml\r\n  head\r\n    title 'Middle Gear - Hello World'\r\n  body\r\n    load name=\"content\"\r\n```\r\n*Inheritor page:*\r\n```\r\nlayout src=\"layout.mel\"\r\nsector name=\"content\"\r\n  span \"Hello world!\"\r\n```\r\n### Putting tags in a same line \r\n**In shorthand version only**, Use `>` for separating tags that are in the same line:\r\n```\r\nul.dropdown-menu\r\n    li > a href=\"#\" 'Action'\r\n    li > a href=\"#\" 'Another action'\r\n```\r\n### Breaking line into multiple lines\r\n**In shorthand version only**, use `,` at the end of line to break a line:\r\n```\r\n    button.btn.btn-default.dropdown-toggle,\r\ntype=\"button\",\r\nid=\"dropdownMenu2\",\r\ndata-toggle=\"dropdown\",\r\naria-haspopup=\"true\" aria-expanded=\"false\"\r\n```\r\n**Note**: As you can see, it's not needed to follow `indention` rule for the broken lines.\r\n\r\n### Plain text\r\nBrowsers eliminate whitespaces but not *Middle Gear(both shorthand and classic versions)*. Everything that is written inside quote marks will be rendered in the same way.\r\n```\r\n  div\r\n    pre\r\n\"It's a \r\n    multi line\r\nplain\r\ntext\"\r\n```\r\n\r\n### Adding Script and Style blocks to markup\r\nAdding *Script* and *Style* is the same as other tags. \r\n```\r\n<style>\r\n  body {\r\n    font: \"tahoma\"\r\n  }\r\n</style>\r\n<script>\r\n  alert('Hello world!')\r\n</script>\r\n```\r\n###### Shorthand version:\r\n```\r\nStyle\r\n  body {\r\n    font: \"tahoma\"\r\n  }\r\nScript\r\n  alert('Hello world!')\r\n```\r\n### Server Side JavaScript inside Script and Style tags\r\nYou can control the rendering of the client-side JavaScript and also CSS using *Melody*. For this you should explicitly express that you are writing server side JavaScript expression by adding `\\` to the start of your code lines.\r\n```\r\nvar en_msg=\"Hello!\",\r\n  en_font=\"tahoma\",\r\n  es_msg= 'Hola!';\r\n\r\n<style>\r\n  body {\r\n    \\if(model.lang==='en')\r\n      font: \"@{en_font}\"\r\n    \\else if(model.lang===\"es\")\r\n      font: \"ubuntu\"\r\n  }\r\n</style>\r\n<script>\r\n  \\if(model.lang==='en')\r\n    alert('@{en_msg}')\r\n  \\else if(model.lang===\"es\")\r\n    alert('@{es_msg}')\r\n</script>\r\n```\r\n###### Shorthand version:\r\n```\r\nvar en_msg=\"Hello!\",\r\n  en_font=\"tahoma\",\r\n  es_msg= 'Hola!';\r\n\r\nStyle\r\n  body {\r\n    \\if(model.lang==='en')\r\n      font: \"@{en_font}\"\r\n    \\else if(model.lang===\"es\")\r\n      font: \"ubuntu\"\r\n  }\r\nScript  \r\n  \\if(model.lang==='en')\r\n    alert('@{en_msg}')\r\n  \\else if(model.lang===\"es\")\r\n    alert('@{es_msg}')\r\n```\r\n### Using custom tags in Melody\r\n**In shorthand version only**, for adding non-HTML5 tags to your markup you should explicitly express it using `>` before the name of tag.\r\n```\r\ndiv\r\n  > custom-tag \r\n```\r\n\r\n### Shorthands\r\nMelody supports shorthand for writing tags:\r\n\r\n* Use `#` after tag's name for adding id:\r\n\r\n```\r\n<input#username>\r\n<input #username>\r\n```\r\n###### Shorthand version:\r\n```\r\ninput#username\r\ninput #username\r\n```\r\n\r\n* Use `.` after tag's name or id for adding class:\r\n\r\n```\r\n<input #username .class1 .class2>\r\n<input.class1.class2#username >\r\n```\r\n###### Shorthand version:\r\n```\r\ninput #username .class1 .class2\r\ninput.class1.class2#username \r\n```\r\n\r\n### Commenting\r\nLike JavaScript, you can use `//` and `/*..*/` for commenting.\r\n\r\n### What about Controller code?\r\n```\r\nvar viewEngineClassic = new(require('middle-gear-gear'))({\r\n  rootDirname: __dirname\r\n});\r\nvar markup = viewEngineClassic.renderFile('index', {\r\n  msg: 'This message is from Controller',\r\n  lang: 'en'\r\n});\r\nconsole.log(markup);\r\n```\r\n###### For using shorthand version:\r\n```\r\nvar viewEngine = new(require('middle-gear'))({\r\n  rootDirname: __dirname\r\n});\r\nvar markup = viewEngine.renderFile('index', {\r\n  msg: 'This message is from Controller',\r\n  lang: 'en'\r\n});\r\nconsole.log(markup);\r\n```\r\n**Note**: `.mel` prefix is abbreviation for **Melody**. You can drop it in `src` attributes and `renderFile` method, but the file must be prefixed with `.mel`.\r\n\r\n### Third party framework support\r\n#### **Angular**\r\nCurrent version of *Middle Gear(both shorthand and classic versions)* compiler supports **Angular 2.0** syntax.\r\n\r\n```\r\ndiv\r\n    span *ng-if=\"expression\" #localValue [(two-way-binding)]=\"prop\"\r\n        'Hello Angular 2.0'\r\n```\r\n\r\n#### SailsJs\r\nFor setting *Middle Gear* as **SailsJs** view engine, modify `view.js` file from `config folder` to look like this:\r\n\r\n```\r\n//view.js\r\nmodule.exports.views = {\r\n   engine: {\r\n      ext: 'mel',\r\n      fn: function(filename, options, fn) {\r\n         var path = require('path');\r\n         var basename = path.basename(filename);\r\n         var viewEngine = new (require('middle-gear'))({\r\n            rootDirname: path.dirname(filename)\r\n         });\r\n         if(!options.model) options.model = {};\r\n         var markup = viewEngine.renderFile(basename, options.model);\r\n         fn(null, markup);\r\n      }\r\n   }\r\n };\r\n```\r\n\r\n#### Lodash\r\n*Middle Gear* compiles *Melody language* in Sand Box mode, so you can't access your **npm packages** that you have added to your project. However **lodash** is injected to view by default, so you can use it in your view code(both shorthand and classic versions).\r\n\r\n```\r\nvar colors = ['Blue', 'Green', 'Red'];\r\ntable\r\n    _.each(colors, function(color) {\r\n        tr\r\n            td '@{color}'\r\n    })\r\n```\r\n---\r\n*Middle Gear is in beta version, so please don't use it in production.*\r\n","google":"UA-69889911-1","note":"Don't delete this file! It's used internally to help with page regeneration."}